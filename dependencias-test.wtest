import dependencias-autos.*
import autos.*
import pedidos.*
import wollok.game.*
import direcciones-regiones.*

describe "Test con dos dependencias"{
    
    //Dependencias
    const deportes = new Dependencia (empleados=45)
    const cultura = new Dependencia (empleados=31)

    //Autos
    //En comun
    const cachito = new Corsa(color="rojo")

    //Deportes
    const corsaAzul = new Corsa(color="azul")
    const corsaVerde = new Corsa(color="verde")
    const kwidConTanque1 = new RenaultKwid(tieneTanqueAdicional=true)
    const autoEspecial = new AutoEspecial(color="beige",capacidad=5,velocidadMaxima=160,peso=1200)

    //Cultura
    const kwidConTanque2 = new RenaultKwid(tieneTanqueAdicional=true)
    const kwidConTanque3 = new RenaultKwid(tieneTanqueAdicional=true)
    const kwidSinTanque = new RenaultKwid(tieneTanqueAdicional=false)

    method initialize(){
        trafic.motor(bataton)
        trafic.interior(popular)

        //Agrego los autos a las dependencias
        deportes.agregarMuchosAFlota([cachito, corsaAzul, corsaVerde, kwidConTanque1, autoEspecial])
        cultura.agregarMuchosAFlota([cachito, kwidConTanque2, kwidConTanque3, kwidSinTanque, trafic])
    }

    //Comprobado menos el comentado
    test "Comprobar asserts de Deportes" {
        assert.equals(1300 + 1300 + 1300 + 1350 + 1200 ,deportes.pesoTotalFlota())
        assert.that(deportes.estaBienEquipada())
        assert.equals(7, deportes.capacidadTotalEnColor("azul"))
        assert.equals("beige", deportes.colorRodadoMasRapido())
        assert.that(deportes.esGrande())
        assert.equals(45 - deportes.capacidadTotal(), deportes.capacidadFaltante())
    }

    test "Comprobar asserts de Cultura" {
        assert.equals(1300 + 1350 + 1350 + 1200 + trafic.peso(), cultura.pesoTotalFlota())
        assert.notThat(cultura.estaBienEquipada())
        assert.equals(10, cultura.capacidadTotalEnColor("azul"))
        assert.equals("rojo", cultura.colorRodadoMasRapido())
        assert.notThat(cultura.esGrande())
        assert.equals(31 - cultura.capacidadTotal(), cultura.capacidadFaltante())
    }
}

describe "Prubas de los pedidos" {
    
    //Pedidos
    const pedido1 = new Pedido(distanciaEnKm = 1000, tiempoEnHs = 8, cantidadPasajeros = 4, coloresIncompatibles = ["verde", "azul"])
    const pedido2 = new Pedido(distanciaEnKm = 900, tiempoEnHs = 6, cantidadPasajeros = 4, coloresIncompatibles = ["rojo"])
    const pedido3 = new Pedido(distanciaEnKm = 1100, tiempoEnHs = 11, cantidadPasajeros = 10, coloresIncompatibles = [])
    
    //Autos
    const cachito = new Corsa(color="rojo")
    const autoEspecial = new AutoEspecial(color="beige",capacidad=5,velocidadMaxima=160,peso=1200)
    const corsaVerde = new Corsa(color="verde")

    method initialize(){
        trafic.motor(bataton)
        trafic.interior(popular)
    }
    
    test "El pedido1 puede ser llevado por cachito y autoEspecial, pero no por corsaVerde, ya que su color es restringido y tampoco la trafic por que no supera la velocidad minima"{
        assert.that(pedido1.autoPuedeHacerPedido(cachito))
        assert.that(pedido1.autoPuedeHacerPedido(autoEspecial))
        assert.notThat(pedido1.autoPuedeHacerPedido(corsaVerde))
        assert.notThat(pedido1.autoPuedeHacerPedido(trafic))
    }

    test "El pedido2 puede ser llevado por el autoEspecial y el corsa verde ya que se relajo su tiempo, pero no por cachito, ya que su color es restringido y tampoco la trafic por que no supera la velocidad minima"{
        pedido2.relajar()
        assert.notThat(pedido2.autoPuedeHacerPedido(cachito))
        assert.that(pedido2.autoPuedeHacerPedido(autoEspecial))
        assert.that(pedido2.autoPuedeHacerPedido(corsaVerde))
        assert.notThat(pedido2.autoPuedeHacerPedido(trafic))
    }

    test "El pedido3 al ser acelerado, solo puede ser llevado por la trafic. No puede ser llevado por cachito, el corsaVerde o autoEspecial debido a que no cubren la capacidad minima"{
        trafic.motor(pulenta)
        pedido3.acelerar()
        assert.notThat(pedido3.autoPuedeHacerPedido(cachito))
        assert.notThat(pedido3.autoPuedeHacerPedido(autoEspecial))
        assert.notThat(pedido3.autoPuedeHacerPedido(corsaVerde))
        assert.that(pedido3.autoPuedeHacerPedido(trafic))
    }
}

describe "Test de registro de pedidos de cada dependencia" {
    //Dependencias
    const deportes = new Dependencia (empleados=45)
    const cultura = new Dependencia (empleados=31)

    //Pedidos
    const pedido1 = new Pedido(distanciaEnKm = 1000, tiempoEnHs = 8, cantidadPasajeros = 4, coloresIncompatibles = ["rojo", "azul"])
    const pedido2 = new Pedido(distanciaEnKm = 900, tiempoEnHs = 6, cantidadPasajeros = 4, coloresIncompatibles = ["verde", "azul"])
    const pedido3 = new Pedido(distanciaEnKm = 1100, tiempoEnHs = 9, cantidadPasajeros = 10, coloresIncompatibles = ["blanco", "azul"])
    const pedido4 = new Pedido(distanciaEnKm = 1500, tiempoEnHs = 13, cantidadPasajeros = 2, coloresIncompatibles = ["rojo"])

    //Autos
    //Deportes
    const corsaAzul = new Corsa(color="azul")
    const corsaVerde = new Corsa(color="verde")

    //Cultura
    const cachito = new Corsa(color="rojo")
    const kwidSinTanque = new RenaultKwid(tieneTanqueAdicional=false)

    method initialize(){
        trafic.motor(pulenta)
        trafic.interior(popular)

        //Agrego los autos a las dependencias
        deportes.agregarMuchosAFlota([corsaAzul, corsaVerde, trafic])
        cultura.agregarMuchosAFlota([cachito, kwidSinTanque, trafic])

        //Agrego los pedidos a las dependecias
        deportes.agregarPedidos([pedido1, pedido2, pedido3])
        cultura.agregarPedidos([pedido1, pedido2, pedido4])
    }

    test "La cantidad total de pasajeros de los pedidos de la dep deportes es 18" {
        assert.equals(18, deportes.totalPasajerosPaquetes())
    }
    
    test "La cantidad total de pasajeros de los pedidos de la dep cultura es 10" {
        assert.equals(10, cultura.totalPasajerosPaquetes())
    }

    test "SI es cierto que el color azul es restringido en todos los pedidos de la dep deportes" {
        assert.that(deportes.esColorIncompatibleDeTodosLosPedidos("azul"))
    }
    
    test "NO es cierto que el color azul es restringido en todos los pedidos de la dep cultura" {
        assert.notThat(cultura.esColorIncompatibleDeTodosLosPedidos("azul"))
    }

    test "EL pedido2 y pedido3 no pueden ser llevados por ninguno de los autos de la dep deportes"{
        deportes.relajarTodosLosPedidos()
        assert.equals([pedido2, pedido3], deportes.pedidosQueNoPuedenSerRealizados())
    }

    test "EL pedido1 no pueden ser llevados por ninguno de los autos de la dep cultura"{
        assert.equals([pedido1, pedido2], cultura.pedidosQueNoPuedenSerRealizados())
    }
}


describe "Pruebas de las filas y las regiones" {
    //Autos
    const cachito = new Corsa(color="rojo", position=game.at(1,2))
    const corsaVerde = new Corsa(color="verde", position=game.at(3,6))

    //Regiones
    const regionRec1 = new Region(minX=3, maxX=5, minY=3, maxY=8)
    const regionRec2 = new Region(minX=1, maxX=4, minY=5, maxY=9)
    const unionReg1y2 = new UnionRegiones (regionesInternas=regionRec1.union(regionRec2))
    const interReg1y2 = new InterRegiones (regionesInternas=regionRec1.interseccion(regionRec2))

    test "Cachito paso por la fila 1, corsa corsaVerde no"{
        assert.that(cachito.pasoPorFila(1))
        assert.notThat(corsaVerde.pasoPorFila(1))
    }

    test "Cachito no paso por la filas 1,2 y 3 y corsaVerde si paso por las filas [3]"{
        assert.notThat(cachito.recorrioFilas([1,2,3]))
        assert.that(corsaVerde.recorrioFilas([3]))
    }

    test "Cachito paso por la posicion 1,2"{
        assert.that(cachito.pasoPor(game.at(1,2)))
        assert.notThat(corsaVerde.pasoPor(game.at(1,2)))
    }

    test "Cachito no esta en la region reionRectangular pero si corsaVerde"{
        assert.notThat(cachito.estaEn(regionRec1))
        assert.that(corsaVerde.estaEn(regionRec1))
    }

    test "Cachito no esta en la union de region reionRec 1 y 2 pero si corsaVerde"{
        assert.notThat(cachito.estaEn(unionReg1y2))
        assert.that(corsaVerde.estaEn(unionReg1y2))
    }

    test "Cachito no esta en la interseccion de region regionRec 1 y 2, pero si el corsaVerde"{
        assert.notThat(cachito.estaEn(interReg1y2))
        assert.that(corsaVerde.estaEn(interReg1y2))
    }
}
